import com.github.triplet.gradle.androidpublisher.ResolutionStrategy as GPPResolutionStrategy

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.github.triplet.gradle:play-publisher:3.5.0'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.4.1'
        classpath 'de.mannodermaus.gradle.plugins:android-junit5:1.7.1.1'
    }
    ext {
        ktorVersion = '1.6.2'
        junitVersion = '5.7.2'
        awalaTestingVersion = '1.5.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'com.github.triplet.play'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'
apply plugin: 'de.mannodermaus.android-junit5'

apply from: 'jacoco.gradle'

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.2'
    ndkVersion '21.3.6528147'

    defaultConfig {
        applicationId "tech.relaycorp.gateway"

        minSdkVersion 21

        targetSdkVersion 31
        versionCode 1
        versionName project.findProperty("versionName") ?: "0.1"

        testInstrumentationRunner "tech.relaycorp.gateway.test.TestAndroidJUnitRunner"

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
                arg("room.incremental", "true")
            }
        }
    }

    signingConfigs {
        debug {}

        if (project.hasProperty('signingKeystorePath')) {
            release {
                storeFile file(signingKeystorePath)
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                keyAlias System.getenv("ANDROID_KEYSTORE_KEY_ALIAS")
                keyPassword System.getenv("ANDROID_KEYSTORE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (project.hasProperty('signingKeystorePath')) {
                signingConfig signingConfigs.release
            }
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/*'
        // Due to https://github.com/Kotlin/kotlinx.coroutines/issues/2023
        exclude 'META-INF/licenses/*'
        exclude '**/attach_hotspot_windows.dll'
    }
    lintOptions {
        checkAllWarnings true
        warningsAsErrors true
        abortOnError true
        lintConfig file('lint.xml')
    }
    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
            resources.srcDirs += "src/sharedTest/resources"
        }
    }

    useLibrary 'android.test.mock'
}

dependencies {
    // Java 8
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    // Kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"

    // Android
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation 'androidx.work:work-runtime-ktx:2.5.0'

    // Dependency Injection
    api 'com.google.dagger:dagger:2.37'
    kapt 'com.google.dagger:dagger-compiler:2.37'

    // Awala
    implementation 'tech.relaycorp:awala:1.63.1'
    implementation 'tech.relaycorp:awala-keystore-file:1.6.0'
    implementation 'tech.relaycorp:cogrpc:1.1.18'
    implementation 'tech.relaycorp:cogrpc-okhttp:1.1.11'
    testImplementation "tech.relaycorp:awala-testing:$awalaTestingVersion"
    androidTestImplementation "tech.relaycorp:awala-testing:$awalaTestingVersion"

    // Android TLS support for Netty
    implementation "io.netty:netty-handler:4.1.65.Final"
    implementation 'org.conscrypt:conscrypt-android:2.5.2'

    // Local and Internet-based Parcel Delivery Connections (PDCs)
    implementation 'tech.relaycorp:poweb:1.5.22'
    implementation "io.ktor:ktor-server-core:$ktorVersion"
    implementation "io.ktor:ktor-server-netty:$ktorVersion"
    implementation "io.ktor:ktor-websockets:$ktorVersion"
    implementation "io.ktor:ktor-client-websockets:$ktorVersion"
    implementation "io.ktor:ktor-client-cio:$ktorVersion"
    implementation "tech.relaycorp:doh:1.0.4"
    testImplementation "io.ktor:ktor-server-test-host:$ktorVersion"
    testImplementation "io.ktor:ktor-test-dispatcher:$ktorVersion"

    // ORM
    def room_version = '2.4.1'
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // required to avoid crash on Android 12 API 31
    implementation 'androidx.work:work-runtime-ktx:2.7.0-beta01'

    // Preferences
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'com.fredporciuncula:flow-preferences:1.5.0'

    // Display open-source licenses
    implementation "com.mikepenz:aboutlibraries:$aboutLibrariesVersion"

    // One-off network requests
    implementation "io.ktor:ktor-client-android:$ktorVersion"

    // PrivateKey operations
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'

    // Testing
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    testImplementation 'org.mockito:mockito-inline:3.11.2'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'

    // Instrumentation Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation('com.adevinta.android:barista:4.0.0') {
        exclude group: 'org.jetbrains.kotlin'
    }
    androidTestImplementation "org.mockito:mockito-android:3.10.0"
    androidTestImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0") {
        // Workaround for Android API < 26:
        // https://github.com/mockito/mockito/pull/2024
        exclude group: "org.mockito", module: "mockito-core"
    }
    kaptAndroidTest 'com.google.dagger:dagger-compiler:2.35.1'
}

spotless {
    kotlin {
        ktlint('0.37.2').userData(['disabled_rules': 'import-ordering', 'max_line_length': '100'])
        target '**/*.kt'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += [
            '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
            '-Xuse-experimental=kotlinx.coroutines.FlowPreview',
            '-Xuse-experimental=kotlin.time.ExperimentalTime'
    ]
}

play {
    enabled.set(project.findProperty("enableGpp") == "true")
    track.set("beta")
    defaultToAppBundles.set(true)
    resolutionStrategy.set(GPPResolutionStrategy.AUTO)
}
